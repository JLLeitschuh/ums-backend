Як працювати з цим модулем

Щоб писати тести на скалі, потрібно зробити декілька простих кроків:

1.Завантажити Scala IDE за адресою
	http://scala-ide.org/

2.Підняти веб сервіс. Важливо, щоб ви піднімали веб сервіс в себе локально, і на 8080 порті.
Якщо в вас піднята аплікація за іншою адресою, змініть в себе локально файл
IntegrationTest відповідно до вашої конфігурації(є можливість змінити хост(localhost) і порт(8080)).

3.Зайдіть в папку is-lnu-integration
	cd ../is-lnu/is-lnu-integration

4.Запустіть тести
	mvn clean install
	
FAQ:
1.Документація. Там ви можете знайти для себе абсолютно все, що потрібно для роботи з gatling-тулзою.
	http://gatling.io/docs/2.0.3/

2. Який принцип дії ?
	В нас є веб сервіс, який отримує дані в форматі JSON і повертає дані в форматі JSON.
	На даному етапі є два варіанти, як можна тестувати дані:
	* Якщо моделька, яку ми тестуємо - словник, тоді потрібно протестувати лише GET по всіх записах
	* Якщо моедлька - динамічно змінювана, тоді потрібно тестувати весь CRUD.Як ви знаєте, CRUD операції -
	це операції Create, Read Update Delete. Відповідно, все це потрібно протестувати. Для того, спочатку ви 
	шлете POST запит на сервер, створюєте запис в базі даних, отримуєте в відповіді з сервера ID сутності.
	Далі ви перевіряєте, чи такий запис існує, шлете GET запит, перевіряючи статус відповіді.
	Далі ви обновляєте, шлете PUT запит, змінюючи якесь поле. Після цього варто ще раз відправити GET запит і
	перевірити чи дійсно це поле, яке ви перед тим міняли - змінилось.Після цього ви шлете DELETE запит, і
	перевіряєте статус. Останній штрих - шлете GET запит, і якщо запис видалений - отримаєте 404 статус.

3.Як добавити динамічні значення?
	Щоб добавити динамічні значення(унікальний код, серійний номер, ще щось) можна використати ось такий приклад
    .exec(session => {
      println("printing session", session)
      session
      	.set("idnum", UUID.randomUUID())
      	.set("other_value_example", "value")
    })
    
    клас UUID - клас джави, але ви можете використати любий інший клас, навіть свій, самописний
    Більш детально про такий підіхд можна подивитись в тесті для персони
    org.lnu.is.integration.PersonIntegrationTest

4.Як тестувати сутності, в є багато зовнішніх ключів(foreign keys)?
	Оскільки кожен інтеграційний тест повинен бути незалежний від інших інтеграційних тестів, тому,
	для того, щоб протестувати таку сутність, ви повинні спочатку відправити запити для створення
	цих зовнішніх табличок, а після того вже почати тестувати свою сутність.Наприклад, є таблиця
	person_name, в ній міститься personId. В даному випадку ми спочатку відправляємо запит на 
	створення персони, витягуємо новостворену айдішку, а вже після цього починаєте створювати
	запити на перевірку person_name. І, звичайно, ви не забуваєте після перевірки всіх операцій
	відправити запит на видалення персони.
	
TODO Integration tests:

PersonFamily
PersonPension
PersonWork
Degree
StudyPlanCycle (потрібно поправити і підключити)
MarkscaleType
EnrolmentForeignType

Broadcastings -> Email sending:
1)Send broadcast with group and independant emails
2)Send broadcast with no groups and independant emails
3)Send broadcast with only group
4)Add non-allowed group in request - expect exception with 400 + status
5)For future - if there is no rights for user to send independant emails - expect exception with 400+ status